{"version":3,"sources":["Chat.jsx","index.js"],"names":["client","ApolloClient","uri","cache","InMemoryCache","GET_MESSAGES","gql","POST_MESSAGE","Messages","user","scrollRef","useRef","data","useQuery","useEffect","current","scrollIntoView","behavior","messagesArr","messages","id","length","map","message","index","key","className","grape","content","ref","Chat","useState","ls","chatState","setChatState","console","log","useMutation","postMessage","type","value","placeholder","onChange","e","target","onKeyUp","variables","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"i3BAYA,IAAMA,EAAS,IAAIC,eAAa,CAC9BC,IAAK,yCACLC,MAAO,IAAIC,kBAWPC,GARaC,cAAH,KAQKA,cAAH,MASZC,EAAeD,cAAH,KAYZE,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACZC,EAAYC,iBAAO,MACjBC,EAASC,mBAASR,GAAlBO,KAERE,qBAAU,WACRJ,EAAUK,QAAQC,eAAe,CAAEC,SAAU,cAG/C,IAAMC,EAAcN,EAAOA,EAAKO,SAAW,GAE3C,OACE,yBAAKC,GAAG,YACLF,EAAYG,OAAS,GACpBH,EAAYI,KAAI,SAACC,EAASC,GACxB,OACE,yBACEC,IAAKD,EACLE,UAAWH,EAAQI,QAAUlB,EAAO,YAAc,IAElD,4BAAKc,EAAQI,OACb,2BAAIJ,EAAQK,aAIpB,yBAAKC,IAAKnB,MAKVoB,EAAO,WAAO,IAAD,EACiBC,mBAAS,CACzCJ,MAAOK,IAAG,cAAgBA,IAAG,cAAgB,GAC7CJ,QAAS,KAHM,mBACVK,EADU,KACCC,EADD,KAKjBC,QAAQC,IAAIH,EAAUN,OALL,MAMKU,sBAAY9B,GAA3B+B,EANU,oBA+BjB,OACE,6BACE,kBAAC,EAAD,CAAU7B,KAAMwB,EAAUN,QAC1B,yBAAKP,GAAG,eACN,2BACEmB,KAAK,OACLC,MAAOP,EAAUN,MACjBc,YAAY,aACZC,SAAU,SAACC,GAnBA,IAAClC,KAoBCkC,EAAEC,OAAOJ,OAnBnBnB,OAAS,IAChBc,QAAQC,IAAI3B,GACZuB,IAAG,aAAcvB,GACjByB,EAAa,2BACRD,GADO,IAEVN,MAAOK,IAAG,qBAiBV,2BACEO,KAAK,OACLC,MAAOP,EAAUL,QACjBa,YAAY,gCACZC,SAAU,SAACC,GAAD,OACRT,EAAa,2BACRD,GADO,IAEVL,QAASe,EAAEC,OAAOJ,UAGtBK,QAAS,SAACF,GACM,UAAVA,EAAElB,MA7CVQ,EAAUL,QAAQP,OAAS,GAC7BiB,EAAY,CACVQ,UAAWb,IAGfC,EAAa,2BACRD,GADO,IAEVL,QAAS,aA8CA,oBACb,kBAAC,iBAAD,CAAgB5B,OAAQA,GACtB,kBAAC,EAAD,QC9HJ,SAAS+C,IACP,OACE,yBAAK3B,GAAG,OACN,8BACE,iCACE,mDACA,kBAAC,EAAD,SAbV4B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACH,EAAD,OAEFI,SAASC,eAAe,SAgBXL,c","file":"static/js/main.b4fd8c8a.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n  useMutation,\n} from \"@apollo/client\";\nimport ls from 'local-storage';\n\nconst client = new ApolloClient({\n  uri: \"https://grape-vine-chat.herokuapp.com/\",\n  cache: new InMemoryCache(),\n});\n\nconst GET_GRAPES = gql`\n  query {\n    grapes {\n      name\n    }\n  }\n`;\n\nconst GET_MESSAGES = gql`\n  query {\n    messages {\n      grape\n      content\n    }\n  }\n`;\n\nconst POST_MESSAGE = gql`\n  # mutation postMessage($grape:String!, $content:String!) {\n  #   postMessage(grape: $grape, content: $content)\n  # }\n  mutation postMessage($grape: String!, $content: String!) {\n    postMessage(grape: $grape, content: $content) {\n      grape\n      content\n    }\n  }\n`;\n\nconst Messages = ({ user }) => {\n  const scrollRef = useRef(null);\n  const { data } = useQuery(GET_MESSAGES);\n  \n  useEffect(() => {\n    scrollRef.current.scrollIntoView({ behavior: \"smooth\" });\n  });\n\n  const messagesArr = data ? data.messages : [];\n\n  return (\n    <div id=\"messages\">\n      {messagesArr.length > 0 &&\n        messagesArr.map((message, index) => {\n          return (\n            <div\n              key={index}\n              className={message.grape === user ? \"this-user\" : \"\"}\n            >\n              <h5>{message.grape}</h5>\n              <p>{message.content}</p>\n            </div>\n          );\n        })}\n      <div ref={scrollRef}></div>\n    </div>\n  );\n};\n\nconst Chat = () => {\n  const [chatState, setChatState] = useState({\n    grape: ls('local-user') ? ls('local-user') : \"\",\n    content: \"\",\n  });\n  console.log(chatState.grape)\n  const [postMessage] = useMutation(POST_MESSAGE);\n\n  const onEnter = () => {\n    if (chatState.content.length > 0) {\n      postMessage({\n        variables: chatState,\n      });\n    }\n    setChatState({\n      ...chatState,\n      content: \"\",\n    });\n  };\n\n  const handleUser = (user) => {\n    if (user.length > 0) {\n      console.log(user)\n      ls(\"local-user\", user)\n      setChatState({\n        ...chatState,\n        grape: ls(\"local-user\"),\n      })\n    }\n  }\n\n  return (\n    <div>\n      <Messages user={chatState.grape} />\n      <div id=\"chat-inputs\">\n        <input\n          type=\"text\"\n          value={chatState.grape}\n          placeholder=\"your name?\"\n          onChange={(e) =>\n            handleUser(e.target.value)\n          }\n        />\n        <input\n          type=\"text\"\n          value={chatState.content}\n          placeholder=\"Message (press enter to send)\"\n          onChange={(e) =>\n            setChatState({\n              ...chatState,\n              content: e.target.value,\n            })\n          }\n          onKeyUp={(e) => {\n            if (e.key === \"Enter\") onEnter();\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default () => (\n  <ApolloProvider client={client}>\n    <Chat />\n  </ApolloProvider>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport Chat from './Chat';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nfunction App() {\n  return ( \n    <div id=\"app\">\n      <main>\n        <section>\n          <h3>Grapes in the vine:</h3>\n          <Chat></Chat>\n        </section>\n      </main>\n    </div>\n   );\n}\n \nexport default App;\n\n"],"sourceRoot":""}